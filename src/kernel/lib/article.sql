
--
-- 表的结构 `mz_posts`
--

CREATE TABLE IF NOT EXISTS `mz_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext NOT NULL,
  `post_title` text NOT NULL,
  `post_excerpt` text NOT NULL,
  `post_status` varchar(20) NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) NOT NULL DEFAULT 'open',
  `post_password` varchar(20) NOT NULL DEFAULT '',
  `post_name` varchar(200) NOT NULL DEFAULT '',
  `to_ping` text NOT NULL,
  `pinged` text NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1297 ;

insert into `mz_posts` (`ID`,  `post_author`,  `post_date`,  `post_date_gmt`,  `post_content`,  `post_title`,  `post_excerpt`,  `post_status`,  `comment_status`,  `ping_status`,  `post_password`,  `post_name`,  `to_ping`,  `pinged`,  `post_modified`,  `post_modified_gmt`,  `post_content_filtered`,  `post_parent`,  `guid`,  `menu_order`,  `post_type`,  `post_mime_type`,  `comment_count`)
values(1, 1, '2013-07-25 17:01:14', '2013-07-25 09:01:14', '这个简单，文章凑个数。\r\n用 ST2 打开 js 文件。\r\n\r\n选择：Tools -> Build System -> New Build System\r\n\r\n然后输入：\r\n[code]\r\n{\r\n	&quot;cmd&quot;: [&quot;node&quot;, &quot;$file&quot;]\r\n}\r\n[/code]\r\n\r\n保存为 NodeJs.sublime-build 然后在 Tools -> Build System 中选择刚刚添加的 NodeJs\r\n接着我们的js随便写个hello\r\n\r\n[code]\r\nconsole.log(&quot;hello world&quot;);\r\n[/code]\r\n\r\n通过 Tools -> Build (Ctrl+B) 来编译，我们来看看效果：\r\n\r\n<a href="http://www.lellansin.com/wp-content/uploads/2013/07/nodejs-sublimetext2.jpg"><img src="http://www.lellansin.com/wp-content/uploads/2013/07/nodejs-sublimetext2.jpg" alt="" title="nodejs-sublimetext2" width="503" height="407" class="alignnone size-full wp-image-1184" /></a>\r\n', 'Sublime Text 2 编译和运行 Nodejs', '', 'inherit', 'open', 'open', '', '1183-revision-2', '', '', '2013-07-25 17:01:14', '2013-07-25 09:01:14', '', 1183, 'http://www.lellansin.com/1183-revision-2.html', 0, 'revision', '', 0);


insert INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(2, 1, '2013-07-25 13:44:20', '2013-07-25 05:44:20', '最开始的时候照着<a href="http://socket.io/#how-to-use" rel="nofollow">socket.io</a>官网上的方法就直接\r\n[code lang="shell"]\r\nnpm install socket.io\r\n[/code]\r\n运行之后没有报错，也没有什么提示，拿着官网上的例子运行结果还报错说模块未找到，各种汗颜。\r\n\r\n[code lang="shell"]\r\nnpm list\r\n[/code]\r\n运行查看了一下，也发现没有安装任何包。然后仔细研究了安装的信息半天最后把目光聚焦在安装时最后出现的信息上：\r\n[code]\r\n├── base64id@0.1.0\r\n├── policyfile@0.0.4\r\n├── redis@0.7.3\r\n└── socket.io-client@0.9.16 (xmlhttprequest@1.4.2, uglify-js@1.2.5, active-x-obfuscator@0.0.1, ws@0.4.27)\r\n[/code]\r\n琢磨一会，看到上面有个 @ + 版本号，就弱弱的在想这个莫不是缺少的依赖项，然后就尝试了一下，结果安装成功了。\r\n[code lang="shell"]\r\nnpm install base64id@0.1.0\r\nnpm install policyfile@0.0.4\r\nnpm install redis@0.7.3\r\nnpm install socket.io-client@0.9.16\r\nnpm install xmlhttprequest@1.4.2\r\nnpm install uglify-js@1.2.5\r\nnpm install active-x-obfuscator@0.0.1\r\nnpm install ws@0.4.27\r\nnpm install tinycolor@0.0.1\r\nnpm install options@0.0.5\r\nnpm install commander@0.6.1\r\nnpm install ws@0.4.27\r\nnpm install ws@0.4.27\r\nnpm install socket.io\r\nnpm list\r\n\r\n[/code]\r\n以上是博主中间碰到的可能会依赖到的包，各位可以直接复制然后在cmd上粘贴即可。', 'nodejs 安装 socket.io', '', 'inherit', 'open', 'open', '', '1172-revision-2', '', '', '2013-07-25 13:44:20', '2013-07-25 05:44:20', '', 1172, 'http://www.lellansin.com/1172-revision-2.html', 0, 'revision', '', 0),
(3, 1, '2013-07-25 13:48:55', '2013-07-25 05:48:55', '前置条件：\r\n确保安装 python 2.7 （默认目录）\r\n确保安装 visual stduio 2008 或以上 （博主是 visual studio 2010）\r\n\r\n其他信息：\r\n博主测试系统：xp、win7 x64\r\nnode 版本：v0.10.13\r\n\r\n开始安装：\r\n最开始的时候照着<a href="http://socket.io/#how-to-use" rel="nofollow">socket.io</a>官网上的方法就直接\r\n[code lang="shell"]\r\nnpm install socket.io\r\n[/code]\r\n运行之后没有报错，也没有什么提示，拿着官网上的例子运行结果还报错说模块未找到，各种汗颜。\r\n[code lang="shell"]\r\nnpm list\r\n[/code]\r\n运行查看了一下，也发现没有安装任何包。然后仔细研究了安装的信息半天最后把目光聚焦在安装时最后出现的信息上：\r\n[code]\r\n├── base64id@0.1.0\r\n├── policyfile@0.0.4\r\n├── redis@0.7.3\r\n└── socket.io-client@0.9.16 (xmlhttprequest@1.4.2, uglify-js@1.2.5, active-x-obfuscator@0.0.1, ws@0.4.27)\r\n[/code]\r\n琢磨一会，看到上面有个 @ + 版本号，就弱弱的在想这个莫不是缺少的依赖项，然后就尝试了一下，结果安装成功了。\r\n[code lang="shell"]\r\nnpm install base64id@0.1.0\r\nnpm install policyfile@0.0.4\r\nnpm install redis@0.7.3\r\nnpm install socket.io-client@0.9.16\r\nnpm install xmlhttprequest@1.4.2\r\nnpm install uglify-js@1.2.5\r\nnpm install active-x-obfuscator@0.0.1\r\nnpm install ws@0.4.27\r\nnpm install tinycolor@0.0.1\r\nnpm install options@0.0.5\r\nnpm install commander@0.6.1\r\nnpm install ws@0.4.27\r\nnpm install ws@0.4.27\r\nnpm install socket.io\r\nnpm list\r\n\r\n[/code]\r\n以上是博主中间碰到的可能会依赖到的包，各位可以直接复制然后在cmd上粘贴即可。', 'nodejs 安装 socket.io', '', 'inherit', 'open', 'open', '', '1172-revision-3', '', '', '2013-07-25 13:48:55', '2013-07-25 05:48:55', '', 1172, 'http://www.lellansin.com/1172-revision-3.html', 0, 'revision', '', 0),
(5, 1, '2013-07-25 14:39:23', '2013-07-25 06:39:23', '如果是Windows系统，请确保你的Windows系统包含源码编译工具。Node.js的源码主要由C++代码和JavaScript代码构成，但是却用gyp工具来做源码的项目管理，该工具采用Python语言写成的。在Windows平台上，Node.js采用gyp来生成Visual Studio Solution文件，最终通过VC++的编译器将其编译为二进制文件。所以，在安装之前请确保你的Windows系统满足以下两个条件：\n\nPython(2.5<version<3.0)。\nVC++ 编译器，包含在Visual Studio 2010中（VC++ 2010 Express亦可）。\n使用npm(node包管理工具)全局安装pomelo:\n\n[code lang="shell"]\n#如果是apt-get安装的node，需要单独安装g++，node的版本建议为0.8系列\nnpm install pomelo -g\n[/code]\n可以通过命令git clone https://github.com/NetEase/pomelo.git下载源代码（如果你有git的话）。\n\n好吧，上面是<a href="https://github.com/NetEase/pomelo/wiki/pomelo%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97" rel="nofollow">官方使用指南</a>上的描述这里说下博主的曲折安装经历\n\n\n<h1>windows xp</h1>\n首先是博主在 xp操作系统 的安装情况，先是最开始的安装的时候没反应然后琢磨了一整子之后先装了 <a href="http://www.lellansin.com/nodejs-%E5%AE%89%E8%A3%85-socket-io.html" title="socket.io 安装过程">socket.io</a> 然后再执行：\n[code lang="shell"]\nnpm install pomelo -g\n[/code]\n居然就装好了，太顺利了反而有些不习惯，安装好了之后通过运行 “--help” 查看一下帮助\n[code lang="shell"]\nE:\\node&gt;pomelo --help\n\n  Usage: pomelo [action] [option]\n\n  Options:\n  init  [path]        create new application\n  start [option]      start the application\n  list                list server information\n  stop                stop the application\n  kill  [--force]     kill the application\n  --version             output framework version\n  --help                output help information\n  [option]            developement(default)/production --daemon\n[/code]\n\n\n<h1>windows 7 x64</h1>\nxp上皆大欢喜的样子，接下来就要说博主苦逼的 win7 64位 安装史了\n\n[code lang="shell"]\nnpm install pomelo\n[/code]\n先是执行安装的时候很快就一片红，接着博主按照 xp 上的老路先去安装 <a href="http://www.lellansin.com/nodejs-%E5%AE%89%E8%A3%85-socket-io.html" title="socket.io 安装过程">socket.io</a> 然后在执行一遍install，结果报错少了很多，却出现了一个新错误：\n<img src="http://bbs.nankai.edu.cn/data/uploads/picture/image/20130613/20130613105143_62235.jpg" alt="pomelo社区上的报错示意图，没看见也没关系">\n错误内容：<font color="red">fatal error C1083: 无法打开包括文件:“v8.h”: No such file or directory</font>\n\n研究好一阵子，最后的解决方案是 Python 2.7 重新默认安装（win7电脑上没默认安装），node从原本的 v0.10.13 刷成了 v0.8.9 而且是32位的 （据说是0.10.x上不支持 v8-profiler 的原因）。随后博主继续执行 install，然后时不时通过 npm list 来查看模块列表中是不是出现了 pomelo，有的时候碰到心急的也用上述 socket.io 安装过程中的办法手动装过几个依赖，总之一阵鸡飞狗跳之后在 npm list 上终于找到 pomelo 的身影。\n\n于是各位以为终于装好了？其实我也以为我装好了，但是我一运行却发现：\n\n[code lang="shell"]\nE:\\node&gt;pomelo\n''pomelo'' 不是内部或外部命令，也不是可运行的程序\n或批处理文件。\n[/code]\n\n这个问题倒是让我反复的重装了几遍最后执行 install pomelo 的时候都只有寥寥几个 http 请求（这意味着依赖模块都已安装好了），于是我变换了战略开始翻起了 node_modules 文件夹。\n\n通过观察 node_modules/pomelo 下的 Makefile 发现 pomelo 安装最后生成的文件是保存在 /node_modules/.bin/ 目录下，接着到 /node_modules/.bin/ 目录下发现了 pomelo 和 pomelo.cmd 这两个文件，再具体就不说了，总之最后的结论就是：\n[code lang="shell"]\nE:\\node&gt;pomelo --help\n''pomelo --help'' 不是内部或外部命令，也不是可运行的程序\n或批处理文件。\n[/code]\n上述方式不行的话，这样就可以了：\n[code lang="shell"]\nE:\\node&gt;node E:\\node\\node_modules\\pomelo\\bin\\pomelo --help\n\n  Usage: pomelo [action] [option]\n\n  Options:\n  init  [path]        create new application\n  start [option]      start the application\n  list                list server information\n  stop                stop the application\n  kill  [--force]     kill the application\n  --version             output framework version\n  --help                output help information\n  [option]            developement(default)/production --daemon\n[/code]\n\n用全路径，虽然麻烦了一点，但是好歹可以用了，像初始化命令的话就这样吧\n[code lang="shell"]\nE:\\node&gt;node E:\\node\\node_modules\\pomelo\\bin\\pomelo init E:\\node\\pomelo_demo\n[/code]\n\n觉得麻烦的话也可以自己写个exe，然后添加到 path 来省略那一串路径（以前的程序员倒是挺喜欢做这种事情的）。\n\n官方环境测试全文：<a href="http://nodejs.netease.com/topic/515279a0b5a2705b5a000983">game server test</a>\n对了，顺便提一句，博主运行官方的测试例子貌似用IE8没反应，换了 firefox 才弹出来一个 ok 的提示。', 'nodejs 安装 pomelo', '', 'inherit', 'open', 'open', '', '1177-revision', '', '', '2013-07-25 14:39:23', '2013-07-25 06:39:23', '', 1177, 'http://www.lellansin.com/1177-revision.html', 0, 'revision', '', 0),
(6, 1, '2013-07-24 22:20:13', '2013-07-24 14:20:13', '\r\n<h2>ctype.h</h2>\r\n[code lang="c"]\r\n\r\n\r\n#ifndef _CTYPE\r\n#define _CTYPE\r\n\r\n/* _Ctype 转换位 */\r\n#define _XA 0x200 /* extra alphabetic */\r\n#define _XS 0x100 /* extra space */\r\n#define _BB  0x80  /* BEL, BS, etc. */\r\n#define _CN  0x40  /* CR, FF, HT, NL, VT */\r\n#define _DI 0x20  /* ''0'' - ''9'' */\r\n#define _LO  0x10  /* ''a'' - ''z'' */\r\n#define _PU  0x08  /* punctuation */\r\n#define _SP  0x04  /* space */\r\n#define _UP  0x02  /* ''A'' - ''Z'' */\r\n#define _XD  0x01  /* ''0'' - ''9'', ''A'' - ''F'', ''a'' - ''f'' */\r\n\r\n/* 声明外部的 _Ctype 转换表 */\r\nextern const short *_Ctype;\r\n\r\n/* 判断是否为小写字母的带参数宏 islower */\r\n#define islower(c) (_Ctype[(int)(c)] &amp; _LO)\r\n\r\n// 其余省略 ...\r\n\r\n#endif\r\n[/code]\r\n\r\n<h2>xctype.c _Ctype 转换表 -- ASCII 版</h2>\r\n[code lang="c"]\r\n\r\n#include &lt;limits.h&gt;\r\n#include &lt;stdio.h&gt;\r\n#include &quot;ctype.h&quot;\r\n\r\n#if EOF != -1 || UCHAR_MAX != 255\r\n#error WRONG CTYPE table\r\n#endif\r\n\r\n/* 组合位 */ \r\n#define XDI (_DI|_XD)\r\n#define XLO (_LO|_XD)\r\n#define XUP (_UP|_XD)\r\n\r\n/* 转换表 */\r\nstatic const short ctype_tab[257] = { 0, /* EOF */\r\n _BB, _BB, _BB, _BB, _BB, _BB, _BB, _BB,\r\n _BB, _CN, _CN, _CN, _CN, _CN, _BB, _BB,\r\n _BB, _BB, _BB, _BB, _BB, _BB, _BB, _BB,\r\n _BB, _BB, _BB, _BB, _BB, _BB, _BB, _BB,\r\n _SP, _PU, _PU, _PU, _PU, _PU, _PU, _PU,\r\n _PU, _PU, _PU, _PU, _PU, _PU, _PU, _PU,\r\n XDI, XDI, XDI, XDI, XDI, XDI, XDI, XDI,\r\n XDI, XDI, _PU, _PU, _PU, _PU, _PU, _PU,\r\n _PU, XUP, XUP, XUP, XUP, XUP, XUP, _UP,\r\n _UP, _UP, _UP, _UP, _UP, _UP, _UP, _UP,\r\n _UP, _UP, _UP, _UP, _UP, _UP, _UP, _UP,\r\n _UP, _UP, _UP, _PU, _PU, _PU, _PU, _PU,\r\n _PU, XLO, XLO, XLO, XLO, XLO, XLO, _LO,\r\n _LO, _LO, _LO, _LO, _LO, _LO, _LO, _LO,\r\n _LO, _LO, _LO, _LO, _LO, _LO, _LO, _LO,\r\n _LO, _LO, _LO, _PU, _PU, _PU, _PU, _BB,\r\n};\r\n\r\nconst short *_Ctype = &amp;ctype_tab[1];\r\n[/code]\r\n\r\n\r\n<h2>ctype.c</h2>\r\n[code lang="c"]\r\n\r\n#include &quot;ctype.h&quot;\r\n\r\n// alphanumeric \r\nint (isalnum)(int c)\r\n{\r\n  return (_Ctype[c] &amp; (_DI | _LO | _UP | _XA));\r\n}\r\n\r\n// alphabetic\r\nint (isalpha)(int c)\r\n{\r\n  return (_Ctype[c] &amp; (_LO | _UP | _XA))\r\n}\r\n\r\n// control\r\nint (iscntrl)(int c)\r\n{\r\n  return (_Ctype[c] &amp; (_BB | _DI));\r\n}\r\n\r\n// digit\r\nint (isdigit)(int c)\r\n{\r\n return (_Ctype[c] &amp; _DI);\r\n}\r\n\r\n// graphic\r\nint (isgraph)(int c)\r\n{\r\n return (_Ctype[c] &amp; (_DI | _LO | _PU | _UP | _XA));\r\n}\r\n\r\n// lowercase\r\nint (islower)(int c)\r\n{\r\n return (_Ctype[c] &amp; _LO);\r\n}\r\n\r\n// printable\r\nint (isprint)(int c)\r\n{\r\n return (_DI | _LO | _PU | _SP | _UP | _XA);\r\n}\r\n\r\n// punctuation\r\nint (ispunct)(int c)\r\n{\r\n return (_Ctype[c] &amp; _PU);\r\n}\r\n\r\n// spacing\r\nint (isspace)(int c)\r\n{\r\n return (_Ctype[c] &amp; (_CN | _SP | _XS));\r\n}\r\n\r\n// 大写字母 uppercase\r\nint (isupper)(int c)\r\n{\r\n  return (_Ctype[c] &amp; _UP);\r\n}\r\n\r\n// hexadecimal\r\nint (isxdigit)(int c)\r\n{\r\n  return (_Ctype[c] &amp; _XD);\r\n}\r\n\r\n[/code]\r\n\r\n\r\n<h1>关于</h1>\r\n\r\n实际上没有什么内容了，只要上一节看懂了，那么这一节只是稍微对照一下用上一节的原理来对照_Ctype 转换表罢了。\r\n\r\n如果有疑問还请参见 <a href="http://www.lellansin.com/c%E6%A0%87%E5%87%86%E5%BA%93-ctype-h-_ctype%E8%BD%AC%E6%8D%A2%E8%A1%A8%E5%8E%9F%E7%90%86.html" target="_blank">C标准库 ctype.h （一） _Ctype转换表原理</a>\r\n', 'C标准库 ctype.h （二） 类型判断函数', '', 'inherit', 'open', 'open', '', '1165-revision-2', '', '', '2013-07-24 22:20:13', '2013-07-24 14:20:13', '', 1165, 'http://www.lellansin.com/1165-revision-2.html', 0, 'revision', '', 0),
(9, 1, '2013-07-25 15:57:12', '2013-07-25 07:57:12', '前置条件：\r\n确保安装 python 2.7 （默认目录）\r\n确保安装 visual stduio 2008 或以上 （博主是 visual studio 2010）\r\n\r\n其他信息：\r\n博主测试系统：xp、win7 x64\r\nnode 版本：v0.10.13\r\n\r\n开始安装：\r\n最开始的时候照着<a href="http://socket.io/#how-to-use" rel="nofollow">socket.io</a>官网上的方法就直接\r\n[code lang="shell"]\r\nnpm install socket.io\r\n[/code]\r\n运行之后没有报错，也没有什么提示，拿着官网上的例子运行结果还报错说模块未找到，各种汗颜。\r\n[code lang="shell"]\r\nnpm list\r\n[/code]\r\n运行查看了一下，也发现没有安装任何包。然后仔细研究了安装的信息半天最后把目光聚焦在安装时最后出现的信息上：\r\n[code]\r\n├── base64id@0.1.0\r\n├── policyfile@0.0.4\r\n├── redis@0.7.3\r\n└── socket.io-client@0.9.16 (xmlhttprequest@1.4.2, uglify-js@1.2.5, active-x-obfuscator@0.0.1, ws@0.4.27)\r\n[/code]\r\n琢磨一会，看到上面有个 @ + 版本号，就弱弱的在想这个莫不是缺少的依赖项，然后就尝试了一下，结果安装成功了。\r\n[code lang="shell"]\r\nnpm install base64id@0.1.0\r\nnpm install policyfile@0.0.4\r\nnpm install redis@0.7.3\r\nnpm install socket.io-client@0.9.16\r\nnpm install xmlhttprequest@1.4.2\r\nnpm install uglify-js@1.2.5\r\nnpm install active-x-obfuscator@0.0.1\r\nnpm install ws@0.4.27\r\nnpm install tinycolor@0.0.1\r\nnpm install options@0.0.5\r\nnpm install commander@0.6.1\r\nnpm install ws@0.4.27\r\nnpm install ws@0.4.27\r\nnpm install socket.io\r\nnpm list\r\n\r\n[/code]\r\n以上是博主中间碰到的可能会依赖到的包，各位可以直接复制然后在cmd上粘贴即可。\r\n\r\n好吧，研究了一阵子之后发现貌似不是要手动安装挨个依赖包的问题，而是最开始的时候不记得在哪里看到的用的是\r\n[code lang="shell"]\r\nnpm install -g socket.io\r\n[/code]\r\n[code lang="shell"]\r\nnpm list     # 查找不到的原因是因为全局安装\r\nnpm list -g  # 这样才能查看到全局的模块\r\n[/code]\r\n结果本地测试就不行，说找不到模块\r\n[code lang="shell"]\r\nnpm install socket.io\r\n[/code]\r\n这样本地就能找到模块了，npm有自带的查找依赖包然后安装的功能，上面的就留个纪念放在这里了。', 'nodejs 安装 socket.io', '', 'inherit', 'open', 'open', '', '1172-revision-6', '', '', '2013-07-25 15:57:12', '2013-07-25 07:57:12', '', 1172, 'http://www.lellansin.com/1172-revision-6.html', 0, 'revision', '', 0),
(11, 1, '2013-07-25 16:59:54', '2013-07-25 08:59:54', '', 'nodejs-sublimetext2', '', 'inherit', 'open', 'open', '', 'nodejs-sublimetext2', '', '', '2013-07-25 16:59:54', '2013-07-25 08:59:54', '', 1183, 'http://www.lellansin.com/wp-content/uploads/2013/07/nodejs-sublimetext2.jpg', 0, 'attachment', 'image/jpeg', 0),
(16, 1, '2013-07-26 14:45:23', '2013-07-26 06:45:23', '\nCentOS 很多自带的Python版本是2.4.3，但是目前许多基于Python的应用软件要求的Python版本应要高于2.4（如iotop、nodejs等要求Python版本至少是2.6以上）\n\n[code lang="shell"]\nwget -c http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2\ntar jxvf Python-2.7.3.tar.bz2\ncd Python-2.7.3\n./configure \nmake &amp;&amp; make install\n[/code]\n\n自此,python2.7安装后路径默认是在/usr/local/lib/python2.7\n[code lang="shell"]\n#查看Python版本：\n/usr/local/bin/python2.7 -V\n[/code]\n\n建立软连接，使系统默认的python指向python2.7\n[code lang="shell"]\nmv /usr/bin/python /usr/bin/python.bak\nln -s /usr/local/bin/python2.7 /usr/bin/python\n#检验python指向是否成功\npython -V\n[/code]\n\n由于yum是基于python2.4.3工作，这里要重新yum的调用\n[code lang="shell"]\n#vi /usr/bin/yum\n[/code]\n将第一行显示的 "#/usr/bin/python" 修改为 "#/usr/bin/python2.4" 保存即可。\n', 'linux 升级 python2.7', '', 'inherit', 'open', 'open', '', '1188-revision', '', '', '2013-07-26 14:45:23', '2013-07-26 06:45:23', '', 1188, 'http://www.lellansin.com/1188-revision.html', 0, 'revision', '', 0),
(17, 1, '2013-07-26 15:45:19', '2013-07-26 07:45:19', '\r\nping 也可以通，但是就不能http访问，\r\n检查一下端口，发现80端口被那防火墙关了，没办法，只能开启此端口，\r\n[code lang="shell"]\r\n vi /etc/sysconfig/iptables\r\n[/code]\r\n\r\n请在：\r\n[code lang="shell"]\r\n-A RH-Firewall-1-INPUT -j REJECT --reject-with icmp-host-prohibited\r\n[/code]\r\n这一句上面添加一句：\r\n[code lang="shell"]\r\n-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\r\n[/code]\r\n\r\n然后重启防火墙\r\n[code lang="shell"]\r\n/etc/init.d/iptables restart\r\n[/code]\r\n\r\n相关命令\r\n[code lang="shell"] \r\n# 查看防火墙的状态\r\n/etc/init.d/iptables status\r\n# 查看80 端口是否占用   \r\nlsof -i tcp:80\r\n# 查看已经连接的服务端口 （ESTABLISHED）  \r\nnetstat -a\r\n# 查看所有的服务端口（LISTEN，ESTABLISHED）  \r\nnetstat -ap\r\n[/code] ', 'centos 开放80端口', '', 'publish', 'open', 'open', '', 'centos-%e5%bc%80%e6%94%be80%e7%ab%af%e5%8f%a3', '', '', '2013-07-26 15:45:19', '2013-07-26 07:45:19', '', 0, 'http://www.lellansin.com/?p=1190', 0, 'post', '', 0),
(18, 1, '2013-07-26 15:44:20', '2013-07-26 07:44:20', '\nping 也可以通，但是就不能http访问，\n检查一下端口，发现80端口被那防火墙关了，没办法，只能开启此端口，\n[code lang="shell"]\n vi /etc/sysconfig/iptables\n[/code]\n\n请在：\n[code lang="shell"]\n-A RH-Firewall-1-INPUT -j REJECT --reject-with icmp-host-prohibited\n[/code]\n这一句上面添加一句：\n[code lang="shell"]\n-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\n[/code]\n\n然后重启防火墙\n[code lang="shell"]\n/etc/init.d/iptables restart\n\n\n\n[code lang=&quot;shell&quot;] \n查看防火墙的状态\n/etc/init.d/iptables status\n \n查看端口相关的语句\n \n查看80 端口是否占用  lsof -i tcp:80\n \n查看已经连接的服务端口 （ESTABLISHED） netstat -a\n \n查看所有的服务端口（LISTEN，ESTABLISHED） netstat -ap\n[/code] ', 'centos 开发80端口', '', 'inherit', 'open', 'open', '', '1190-revision', '', '', '2013-07-26 15:44:20', '2013-07-26 07:44:20', '', 1190, 'http://www.lellansin.com/1190-revision.html', 0, 'revision', '', 0),
(20, 1, '2013-07-27 11:31:15', '2013-07-27 03:31:15', '<h1>很常用的sizeof</h1>\n<table>\n<tr><td><font color="blue">sizeof</font></td><td>获取类型或变量所占空间大小</td></tr>\n</table>\n\n<h1>基本类型定义</h1>\n<table>\n<tr><td><font color="blue">void</font> </td><td>空类型</td></tr>\n<tr><td><font color="blue">char</font> </td><td>字符类型</td></tr>\n<tr><td><font color="blue">int</font></td><td> 整数类型</td></tr>\n<tr><td><font color="blue">short</font> </td><td>短类型</td></tr>\n<tr><td><font color="blue">long</font> </td><td>长类型</td></tr>\n<tr><td><font color="blue">float</font></td><td>小数类型（单精度）</td></tr>\n<tr><td><font color="blue">double</font> </td><td>小数类型（双精度）</td></tr>\n</table>\n\n<h1>类型自定义</h1>\n<table>\n<tr><td><font color="green">struct</font></td><td>结构体</td></tr>\n<tr><td><font color="green">union</font></td><td>共同体</td></tr>\n<tr><td><font color="green">enum</font> </td><td>枚举类型</td></tr>\n<tr><td><font color="blue">typedef</font></td><td>定义类型同义字</td></tr>\n</table>\n\n不同的类型在不同的系统和不同的编译环境下所占空间大小不尽相同, 所以想要知道该类型所占空间大小请使用 <font color="blue">sizeof</font> 关键字\n例如像查看 字符类型 所占空间大小可以:\n[code lang="c"]\nprintf(&quot;%d&quot;, sizeof(char) );# 查看 char 类型(字符类型) 所占空间大小\n[/code]\n查看具体一个整数类型变量 所占空间大小可以:\n[code lang="c"]\nint num = 10;        # 定义一个整数变量 num 并赋值为 10\nprintf(&quot;%d&quot;, sizeof(num) ); # 查看变量 num 所占空间大小\n[/code]\n查看自定义类型所占的大小\n[code lang="c"]\n# 定义一个结构体类型 student\nstruct student {\n  char name[10]; // 自定义类型成员 name 数组\n int age;  // 自定义类型成员 age\n};\nprintf(&quot;%d&quot;, sizeof(struct student) );  # 查看 struct student 类型所占空间大小\n[/code]\n\n<h1>类型符号限定</h1>\n<table>\n<tr><td><font color="blue">signed</font> (默认省略)</td><td>有符号变量,变量最高位用来做符号位,有正负值</td></tr>\n<tr><td><font color="blue">unsigned</font></td><td>无符号变量,无正负值</td></tr>\n</table>\n\n<h1>内存状态修饰</h1>\n<table>\n<tr><td><font color="blue">auto</font> (默认省略)</td><td>变量内存自动分配(函数结束会释放)</td></tr>\n<tr><td><font color="blue">static</font> </td><td>变量分配静态内存(函数结束不会释放)</td></tr>\n<tr><td><font color="blue">const</font> </td><td>声明常量,变量只读,除了初始化不能修改</td></tr>\n</table>\n\n\n<h1>流程控制</h1>\n<table>\n<tr><td><font color="red">if</font></td><td>条件语句</td></tr>\n<tr><td><font color="red">else</font> </td><td>条件语句否定分支（与 <font color="red">if</font> 连用）</td></tr>\n<tr><td><font color="red">switch</font> </td><td>根据随后的值来跳转</td></tr>\n<tr><td><font color="red">case</font></td><td>若<font color="red">switch</font>的值等于case的值, 则执行<font color="red">case</font>后的语句</td></tr>\n<tr><td><font color="red">default</font></td><td><font color="red">case</font>条件都不满足时, 默认执行</td></tr>\n<tr><td><font color="red">for</font></td><td>一种循环语句</td></tr>\n<tr><td><font color="red">while</font> </td><td>循环语句的循环条件</td></tr>\n<tr><td><font color="red">do</font> </td><td>循环语句的循环体</td></tr>\n<tr><td><font color="red">goto</font></td><td>无条件跳转语句</td></tr>\n<tr><td><font color="red">break</font></td><td>结束当前循环</td></tr>\n<tr><td><font color="red">continue</font></td><td>结束该次循环, 进入循环的下一次</td></tr>\n</table>\n\n<h1>其它常用</h1>\n<table>\n<tr><td><font color="blue">extern</font></td><td>拓展声明，常用于在其它文件中引用变量</td></tr>\n<tr><td><font color="blue">return</font> </td><td>函数返回</td></tr>\n</table>\n\n<h1>不常用</h1>\n<table>\n<tr><td><font color="grey">register</font></td><td>声明寄存器变量</td></tr>\n<tr><td><font color="grey">volatile</font></td><td>说明变量在程序执行中可被隐含地改变</td></tr>\n</table>\n', 'C语言 关键字', '', 'inherit', 'open', 'open', '', '1192-revision', '', '', '2013-07-27 11:31:15', '2013-07-27 03:31:15', '', 1192, 'http://www.lellansin.com/1192-revision.html', 0, 'revision', '', 0);
